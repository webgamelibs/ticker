{"version":3,"file":"ticker.js","sourceRoot":"","sources":["../src/ticker.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,MAAM;IACjB,OAAO,CAAS;IAChB,QAAQ,GAAG,CAAC,CAAA;IAEZ,YAAY,MAAmC,EAAE,GAAY;QAC3D,IAAI,CAAC,OAAO,GAAG,GAAG,KAAK,SAAS,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAA;QAE7D,IAAI,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;QAChC,IAAI,UAAU,GAAG,CAAC,CAAA;QAElB,MAAM,IAAI,GAAG,CAAC,SAAiB,EAAE,EAAE;YACjC,IAAI,CAAC;gBACH,MAAM,EAAE,GAAG,CAAC,SAAS,GAAG,QAAQ,CAAC,GAAG,IAAI,CAAA;gBACxC,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC;oBACX,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAA;oBAC3B,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,GAAG,CAAC,EAAE,CAAC;wBACvC,UAAU,IAAI,EAAE,CAAA;wBAChB,MAAM,SAAS,GAAG,CAAC,GAAG,MAAM,CAAA;wBAC5B,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC;4BAC5B,MAAM,CAAC,SAAS,CAAC,CAAA;4BACjB,IAAI,UAAU,IAAI,SAAS,GAAG,CAAC,EAAE,CAAC;gCAChC,MAAM,CAAC,EAAE,CAAC,CAAA;gCACV,UAAU,GAAG,CAAC,CAAA;4BAChB,CAAC;iCAAM,CAAC;gCACN,UAAU,IAAI,SAAS,CAAA;4BACzB,CAAC;wBACH,CAAC;oBACH,CAAC;yBAAM,CAAC;wBACN,MAAM,CAAC,EAAE,CAAC,CAAA;oBACZ,CAAC;gBACH,CAAC;YACH,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,kCAAkC;gBAClC,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,GAAG,CAAC,CAAA;YACvD,CAAC;oBAAS,CAAC;gBACT,QAAQ,GAAG,SAAS,CAAA;gBACpB,IAAI,CAAC,QAAQ,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAA;YAC7C,CAAC;QACH,CAAC,CAAA;QAED,IAAI,CAAC,QAAQ,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAA;IAC7C,CAAC;IAED,SAAS,CAAC,GAAW;QACnB,IAAI,CAAC,OAAO,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAA;IAC1C,CAAC;IAED,aAAa;QACX,IAAI,CAAC,OAAO,GAAG,SAAS,CAAA;IAC1B,CAAC;IAED,MAAM;QACJ,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;IACrC,CAAC;CACF","sourcesContent":["export class Ticker {\n  #fpsCap?: number\n  #frameId = 0\n\n  constructor(onTick: (deltaTime: number) => void, fps?: number) {\n    this.#fpsCap = fps !== undefined && fps > 0 ? fps : undefined\n\n    let prevTime = performance.now()\n    let lagSeconds = 0\n\n    const step = (timestamp: number) => {\n      try {\n        const dt = (timestamp - prevTime) / 1000\n        if (dt > 0) {\n          const fpsCap = this.#fpsCap\n          if (fpsCap !== undefined && fpsCap > 0) {\n            lagSeconds += dt\n            const fixedStep = 1 / fpsCap\n            if (lagSeconds >= fixedStep) {\n              onTick(fixedStep)\n              if (lagSeconds >= fixedStep * 2) {\n                onTick(dt)\n                lagSeconds = 0\n              } else {\n                lagSeconds -= fixedStep\n              }\n            }\n          } else {\n            onTick(dt)\n          }\n        }\n      } catch (err) {\n        // just log error, keep loop alive\n        console.error('[Ticker] onTick threw an error:', err)\n      } finally {\n        prevTime = timestamp\n        this.#frameId = requestAnimationFrame(step)\n      }\n    }\n\n    this.#frameId = requestAnimationFrame(step)\n  }\n\n  setFpsCap(fps: number) {\n    this.#fpsCap = fps > 0 ? fps : undefined\n  }\n\n  disableFpsCap() {\n    this.#fpsCap = undefined\n  }\n\n  remove() {\n    cancelAnimationFrame(this.#frameId)\n  }\n}\n"]}