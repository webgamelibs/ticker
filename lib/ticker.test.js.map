{"version":3,"file":"ticker.test.js","sourceRoot":"","sources":["../src/ticker.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { Ticker } from './ticker'\n\ntype RAFCallback = (time: number) => void\n\ndescribe('Ticker', () => {\n  let currentTime = 0\n  let rafCallbacks: Map<number, RAFCallback>\n  let nextId: number\n  let originalRAF: typeof global.requestAnimationFrame\n  let originalCAF: typeof global.cancelAnimationFrame\n  let originalPerfNow: () => number\n\n  beforeAll(() => {\n    originalRAF = global.requestAnimationFrame\n    originalCAF = global.cancelAnimationFrame\n    originalPerfNow = performance.now\n  })\n\n  beforeEach(() => {\n    currentTime = 0\n    rafCallbacks = new Map()\n    nextId = 1\n\n    // Mock performance.now()\n    // Ticker가 생성 시 prevTime을 잡을 때만 사용됩니다.\n    // 이후 dt는 RAF timestamp로 계산됩니다.\n    performance.now = jest.fn(() => currentTime)\n\n    // Mock RAF/CAF\n    global.requestAnimationFrame = ((cb: RAFCallback) => {\n      const id = nextId++\n      rafCallbacks.set(id, cb)\n      return id\n    }) as any\n\n    global.cancelAnimationFrame = ((id: number) => {\n      rafCallbacks.delete(id)\n    }) as any\n  })\n\n  afterEach(() => {\n    jest.clearAllMocks()\n    // 원상 복귀\n    performance.now = originalPerfNow\n    global.requestAnimationFrame = originalRAF\n    global.cancelAnimationFrame = originalCAF\n  })\n\n  /**\n   * 유틸: 한 프레임을 진행한다.\n   * 등록된 가장 오래된 콜백 1개를 꺼내 지정 ms만큼 시간이 흐른 시점으로 호출.\n   * 호출 중 Ticker가 다음 RAF를 예약하면 map에 새 콜백이 추가됩니다.\n   */\n  function advanceOneFrame(ms: number) {\n    const first = rafCallbacks.entries().next().value as [number, RAFCallback] | undefined\n    if (!first) throw new Error('no RAF callback to advance')\n    const [id, cb] = first\n    rafCallbacks.delete(id)\n    currentTime += ms\n    cb(currentTime)\n  }\n\n  /**\n   * 유틸: n 프레임을 연속 진행\n   */\n  function advanceFrames(count: number, msPerFrame: number) {\n    for (let i = 0; i < count; i++) {\n      advanceOneFrame(msPerFrame)\n    }\n  }\n\n  test('uncapped: onTick은 dt(초)로 1:1 호출된다', () => {\n    const onTick = jest.fn()\n    // 생성 시 performance.now()=0으로 prevTime 초기화, 첫 RAF 등록\n    const ticker = new Ticker(onTick)\n\n    // 첫 프레임: 16ms 경과 → dt=0.016\n    advanceOneFrame(16)\n    expect(onTick).toHaveBeenCalledTimes(1)\n    expect(onTick).toHaveBeenLastCalledWith(0.016)\n\n    // 두 번째 프레임: 추가 33ms 경과 → dt=0.033\n    advanceOneFrame(33)\n    expect(onTick).toHaveBeenCalledTimes(2)\n    expect(onTick).toHaveBeenLastCalledWith(0.033)\n\n    ticker.remove()\n  })\n\n  test('fpsCap: fixed step만큼 축적되면 호출되고, lag가 2*step 이상이면 추가로 dt 전체를 한 번 더 호출한다', () => {\n    const onTick = jest.fn()\n    // fps=10 → fixedStep=0.1s\n    const ticker = new Ticker(onTick, 10)\n\n    // 300ms 동안 프레임 1번만 들어오면:\n    // 1) lag=0.3 >= 0.1 → onTick(0.1)\n    // 2) lag(여전히 0.3)이 2*0.1 이상 → onTick(dt=0.3) 추가 호출, lag=0으로 리셋\n    advanceOneFrame(300)\n    expect(onTick).toHaveBeenNthCalledWith(1, 0.1)\n    expect(onTick).toHaveBeenNthCalledWith(2, 0.3)\n    expect(onTick).toHaveBeenCalledTimes(2)\n\n    ticker.remove()\n  })\n\n  test('fpsCap: lag가 fixedStep 이상이지만 2*fixedStep 미만이면 한 번만 fixedStep으로 호출한다', () => {\n    const onTick = jest.fn()\n    // fps=20 → fixedStep=0.05s\n    const ticker = new Ticker(onTick, 20)\n\n    // 70ms 경과: lag=0.07 >= 0.05 → onTick(0.05), 남은 lag는 0.02\n    advanceOneFrame(70)\n    expect(onTick).toHaveBeenCalledTimes(1)\n    expect(onTick).toHaveBeenLastCalledWith(0.05)\n\n    // 이후 30ms 더 경과: 누적 lag=0.02 + 0.03 = 0.05 → onTick(0.05) 한 번 더\n    advanceOneFrame(30)\n    expect(onTick).toHaveBeenCalledTimes(2)\n    expect(onTick).toHaveBeenLastCalledWith(0.05)\n\n    ticker.remove()\n  })\n\n  test('setFpsCap/disableFpsCap: 동적으로 캡 변경 및 해제', () => {\n    const onTick = jest.fn()\n    const ticker = new Ticker(onTick) // uncapped 시작\n\n    // uncapped 10ms → dt=0.01\n    advanceOneFrame(10)\n    expect(onTick).toHaveBeenLastCalledWith(0.01)\n\n    // fps=5로 캡 설정 → fixedStep=0.2\n    ticker.setFpsCap(5)\n\n    // 250ms 경과: lag=0.25 → onTick(0.2) 1회, 0.25>=0.4는 false라 두 번째는 없음\n    onTick.mockClear()\n    advanceOneFrame(250)\n    expect(onTick).toHaveBeenCalledTimes(1)\n    expect(onTick).toHaveBeenLastCalledWith(0.2)\n\n    // 캡 해제\n    ticker.disableFpsCap()\n\n    // uncapped 40ms → dt=0.04 그대로\n    onTick.mockClear()\n    advanceOneFrame(40)\n    expect(onTick).toHaveBeenCalledTimes(1)\n    expect(onTick).toHaveBeenLastCalledWith(0.04)\n\n    ticker.remove()\n  })\n\n  test('remove: 이후 프레임이 더 이상 호출되지 않는다(취소 확인)', () => {\n    const onTick = jest.fn()\n    const ticker = new Ticker(onTick)\n\n    // 한 프레임 처리 후 즉시 remove\n    advanceOneFrame(16)\n    const callsAfterFirst = onTick.mock.calls.length\n    ticker.remove()\n\n    // 더 진행해도 콜백이 호출되지 않아야 함\n    // 남아있는 콜백이 있을 수 있으니 에러 없이 종료되게 방어적으로 처리\n    if (rafCallbacks.size > 0) {\n      // 남은 콜백은 취소되어야 한다. advance를 시도해도 호출되지 않게 확인.\n      const sizeBefore = rafCallbacks.size\n      // 취소가 제대로 됐다면 advanceOneFrame를 부르면 에러(콜백 없음)가 나야 함\n      expect(() => advanceOneFrame(16)).toThrow()\n      expect(rafCallbacks.size).toBe(sizeBefore) // 변화 없음\n    }\n    expect(onTick).toHaveBeenCalledTimes(callsAfterFirst)\n  })\n})\n"]}