{"version":3,"file":"ticker.test.js","sourceRoot":"","sources":["../src/ticker.test.ts"],"names":[],"mappings":"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","sourcesContent":["/** @jest-environment jsdom */\n\nimport { Ticker } from './ticker'\n\ntype RAFCallback = (time: number) => void\n\ndescribe('Ticker', () => {\n  let currentTime = 0\n  let rafCallbacks: Map<number, RAFCallback>\n  let nextId: number\n  let originalRAF: typeof global.requestAnimationFrame\n  let originalCAF: typeof global.cancelAnimationFrame\n  let originalPerfNow: () => number\n\n  beforeAll(() => {\n    originalRAF = global.requestAnimationFrame\n    originalCAF = global.cancelAnimationFrame\n    originalPerfNow = performance.now\n  })\n\n  beforeEach(() => {\n    currentTime = 0\n    rafCallbacks = new Map()\n    nextId = 1\n\n    // Mock performance.now():\n    // Only used to seed prevTime at construction; later dt uses RAF timestamps.\n    performance.now = jest.fn(() => currentTime)\n\n    // Mock RAF/CAF with a simple registry.\n    global.requestAnimationFrame = ((cb: RAFCallback) => {\n      const id = nextId++\n      rafCallbacks.set(id, cb)\n      return id\n    }) as any\n\n    global.cancelAnimationFrame = ((id: number) => {\n      rafCallbacks.delete(id)\n    }) as any\n  })\n\n  afterEach(() => {\n    jest.clearAllMocks()\n    // Restore globals.\n    performance.now = originalPerfNow\n    global.requestAnimationFrame = originalRAF\n    global.cancelAnimationFrame = originalCAF\n  })\n\n  /**\n   * Advance exactly one scheduled frame by ms.\n   * Picks the oldest registered RAF callback, removes it from the queue,\n   * advances the clock, then invokes it with the new timestamp.\n   * If the callback schedules the next RAF (expected), it will be added to the map.\n   */\n  function advanceOneFrame(ms: number) {\n    const first = rafCallbacks.entries().next().value as [number, RAFCallback] | undefined\n    if (!first) throw new Error('no RAF callback to advance')\n    const [id, cb] = first\n    rafCallbacks.delete(id)\n    currentTime += ms\n    cb(currentTime)\n  }\n\n  /**\n   * Convenience: advance multiple frames by a fixed step each time.\n   */\n  function advanceFrames(count: number, msPerFrame: number) {\n    for (let i = 0; i < count; i++) {\n      advanceOneFrame(msPerFrame)\n    }\n  }\n\n  test('uncapped: onTick is called 1:1 with raw dt (seconds)', () => {\n    const onTick = jest.fn()\n    const ticker = new Ticker(onTick)\n\n    // First frame: 16ms -> dt=0.016\n    advanceOneFrame(16)\n    expect(onTick).toHaveBeenCalledTimes(1)\n    expect(onTick).toHaveBeenLastCalledWith(0.016)\n\n    // Second frame: +33ms -> dt=0.033\n    advanceOneFrame(33)\n    expect(onTick).toHaveBeenCalledTimes(2)\n    expect(onTick).toHaveBeenLastCalledWith(0.033)\n\n    ticker.remove()\n  })\n\n  test('fpsCap: when lag >= fixedStep, call once with fixedStep; if lag >= 2*fixedStep, call again with raw dt and reset lag', () => {\n    const onTick = jest.fn()\n    // fps=10 -> fixedStep=0.1s\n    const ticker = new Ticker(onTick, 10)\n\n    // Single long frame of 300ms:\n    // 1) lag=0.3 >= 0.1 -> onTick(0.1)\n    // 2) lag still >= 2*0.1 -> onTick(0.3), lag resets to 0\n    advanceOneFrame(300)\n    expect(onTick).toHaveBeenNthCalledWith(1, 0.1)\n    expect(onTick).toHaveBeenNthCalledWith(2, 0.3)\n    expect(onTick).toHaveBeenCalledTimes(2)\n\n    ticker.remove()\n  })\n\n  test('fpsCap: if fixedStep <= lag < 2*fixedStep, call once with fixedStep and keep remaining lag', () => {\n    const onTick = jest.fn()\n    // fps=20 -> fixedStep=0.05s\n    const ticker = new Ticker(onTick, 20)\n\n    // 70ms: lag=0.07 >= 0.05 -> onTick(0.05); remaining lag=0.02\n    advanceOneFrame(70)\n    expect(onTick).toHaveBeenCalledTimes(1)\n    expect(onTick).toHaveBeenLastCalledWith(0.05)\n\n    // +30ms: lag=0.02 + 0.03 = 0.05 -> onTick(0.05)\n    advanceOneFrame(30)\n    expect(onTick).toHaveBeenCalledTimes(2)\n    expect(onTick).toHaveBeenLastCalledWith(0.05)\n\n    ticker.remove()\n  })\n\n  test('setFpsCap/disableFpsCap: change cap at runtime and then remove it', () => {\n    const onTick = jest.fn()\n    const ticker = new Ticker(onTick) // uncapped\n\n    // uncapped 10ms -> dt=0.01\n    advanceOneFrame(10)\n    expect(onTick).toHaveBeenLastCalledWith(0.01)\n\n    // enable cap: fps=5 -> fixedStep=0.2\n    ticker.setFpsCap(5)\n\n    // 250ms: lag=0.25 -> onTick(0.2) once; 0.25>=0.4 is false -> no second call\n    onTick.mockClear()\n    advanceOneFrame(250)\n    expect(onTick).toHaveBeenCalledTimes(1)\n    expect(onTick).toHaveBeenLastCalledWith(0.2)\n\n    // disable cap\n    ticker.disableFpsCap()\n\n    // uncapped 40ms -> dt=0.04\n    onTick.mockClear()\n    advanceOneFrame(40)\n    expect(onTick).toHaveBeenCalledTimes(1)\n    expect(onTick).toHaveBeenLastCalledWith(0.04)\n\n    ticker.remove()\n  })\n\n  test('remove: after remove(), no further ticks are delivered', () => {\n    const onTick = jest.fn()\n    const ticker = new Ticker(onTick)\n\n    // Process one frame then remove immediately.\n    advanceOneFrame(16)\n    const callsAfterFirst = onTick.mock.calls.length\n    ticker.remove()\n\n    // Attempt to advance further: there should be nothing to run.\n    // If any RAF remained, advancing would invoke callbacks; we expect none.\n    expect(() => advanceOneFrame(16)).toThrow('no RAF callback to advance')\n    expect(onTick).toHaveBeenCalledTimes(callsAfterFirst)\n  })\n\n  test('onTick throws: loop continues and logs to console.error', () => {\n    const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {})\n    const onTick = jest\n      .fn()\n      .mockImplementationOnce(() => { throw new Error('boom') }) // throw on first frame\n      .mockImplementation(() => {}) // subsequent frames succeed\n\n    const ticker = new Ticker(onTick)\n\n    // First frame triggers the throw\n    advanceOneFrame(50) // ~0.05s\n    expect(onTick).toHaveBeenCalledTimes(1)\n    expect(consoleSpy).toHaveBeenCalled() // error is logged\n\n    // Loop must still be alive and schedule next frame\n    advanceOneFrame(16)\n    expect(onTick).toHaveBeenCalledTimes(2)\n\n    ticker.remove()\n    consoleSpy.mockRestore()\n  })\n\n  test('after an exception, prevTime is updated so next dt is not inflated', () => {\n    let secondDt: number | undefined\n    const onTick = jest\n      .fn()\n      .mockImplementationOnce(() => { throw new Error('boom') }) // first frame throws\n      .mockImplementation((dt: number) => { secondDt = dt }) // capture dt on second frame\n\n    const ticker = new Ticker(onTick)\n\n    // First frame throws; prevTime should still be updated in finally.\n    advanceOneFrame(40) // ~0.04s\n\n    // Next frame should use the current frame as the baseline, not accumulate.\n    advanceOneFrame(16)\n    expect(onTick).toHaveBeenCalledTimes(2)\n    expect(secondDt!).toBeGreaterThan(0.010)\n    expect(secondDt!).toBeLessThan(0.030)\n\n    ticker.remove()\n  })\n})\n"]}